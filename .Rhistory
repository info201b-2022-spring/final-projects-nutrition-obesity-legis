source("C:/Users/TyTyT/Downloads/demo.R")
source("C:/Users/TyTyT/Downloads/demo.R")
source("C:/Users/TyTyT/Downloads/demo.R")
View(data)
View(data)
View(data)
source("C:/Users/TyTyT/Downloads/demo.R")
data %>%
mutate(state_highest_ratio = cases/deaths)
View(data)
source("C:/Users/TyTyT/Downloads/demo.R")
data %>%
arrange(-date)
mutate(state_highest_ratio = cases/deaths)
source("C:/Users/TyTyT/Downloads/demo.R")
data %>%
filter(date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
filter(ratio == max(ratio))
data %>%
filter(date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
data %>%
filter(date == max(date)) %>%
mutate(ratio = deaths/cases) %>%
data %>%
filter(date == max(date)) %>%
mutate(ratio = deaths/cases)
data %>%
filter(date == max(date)) %>%
mutate(ratio = deaths/cases)
counties %>%
filter(deaths = max(deaths))
counties %>%
filter(deaths == max(deaths))
counties %>%
na.omit() %>%
filter(deaths == max(deaths))
counties %>%
group_by(state)
counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
filter(date == max(date))
counties %>%
group_by(state) %>%
filter(cases == max(cases)) %>%
filter(date == max(date))
shiny::runApp()
runApp('~/lect14')
library(shiny); runApp('appwithTabs.r')
pageTwo <- ## make a pagetwo
tabPanel( # Make a tab
"Page two", ## Name the tab
fluidPage( ## Generate UI
sidebarLayout(   ## sidebarPanel AND mainPanel are CHILDREN of sidebarLayout
sidebarPanel(
radioButtons(
inputId = "myradiobutton",
label = "Here goes a description. Whatever you click will change the Y AXIS!",
choices = list("i want the model" = "model", "i want the manufacturer!" = "manufacturer", "highway mileage!" = "hwy")
)),
mainPanel(
plotOutput(outputId = "myplot2"),
h2("the slider doesn't actually effect the plot cuz im too lazy to fix it, just wanted to show what the UI looks like (:")
)
)
)
) ## end page two
shiny::runApp('~/final-projects-ttr007')
runApp('~/final-projects-ttr007')
runApp('~/final-projects-ttr007')
source("~/final-projects-ttr007/map.R")
setwd("~/final-projects-ttr007")
source("~/final-projects-ttr007/Chart2.R")
source("~/final-projects-ttr007/Chart2.R")
library(tidyverse)
linechart
source("~/final-projects-ttr007/Chart1.R")
barplot
map
source("~/final-projects-ttr007/map.R")
map
data
colnames(data)
View(data)
source("~/final-projects-ttr007/map.R")
map
runApp('C:/Users/TyTyT/Downloads/app-1.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(only_obesity_perc)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/final-projects-ttr007/map.R")
map2
source("~/final-projects-ttr007/map.R")
map2
map2 <- ggplot(data= only_obesity_perc, aes(fill=mean_percentage) +
geom_polygon(color = "white") +
guides(fill=FALSE) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States') +
coord_fixed(1.3)
map2
map2 <- ggplot(data= only_obesity_perc, aes(fill=mean_percentage) +
geom_polygon(color = "white") +
guides(fill=FALSE) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States')
map2 <- ggplot(data= only_obesity_perc, aes(fill=mean_percentage)) +
geom_polygon(color = "white") +
guides(fill=FALSE) +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States')
map2
source("~/final-projects-ttr007/map.R")
map2
map2
source("~/final-projects-ttr007/map.R")
install.packages("maps")
install.packages("maps")
install.packages("mapdata")
state <- map_data("state")
source("~/final-projects-ttr007/map.R")
state
source("~/final-projects-ttr007/map.R")
map2
View(state)
source("~/final-projects-ttr007/map.R")
source("~/final-projects-ttr007/map.R")
source("~/final-projects-ttr007/map.R")
map2
source("~/final-projects-ttr007/map.R")
map2
source("~/final-projects-ttr007/map.R")
map2
View(only_obesity_perc)
state
source("~/final-projects-ttr007/map.R")
colnames(state)
source("~/final-projects-ttr007/map.R")
bruh
source("~/final-projects-ttr007/map.R")
map
library(shiny); runApp('C:/Users/TyTyT/Downloads/appwithTabs.r')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/final-projects-ttr007/Chart2.R")
linechart
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
colnames(dataset)
income <- dataset %>%
filter(Question == "Percent of adults aged 18 years and older who have an overweight classification", Income != "") %>%
select(Data_Value, Income) %>%
na.omit(Income) %>%
group_by(Income) %>%
summarize(avg_value = mean(Data_Value))
# http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/ used for help with some of the formatting
# https://stackoverflow.com/questions/35090883/remove-all-of-x-axis-labels-in-ggplot used to figure out how to remove x-axis labels
barplot <- ggplot(races_overweight, aes(x=Income, y=avg_value, fill = Income)) + geom_bar(stat="identity") +
scale_x_discrete(guide = guide_axis(n.dodge=3))  +
xlab("Income") +
ylab("Average % Overweight Classification") +
ggtitle("Average % Overweight Classification by Income") +
guides(fill=guide_legend(title="Income")) +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
barplot
income
source("~/final-projects-ttr007/Chart1.R")
barplot
source("~/final-projects-ttr007/Chart1.R")
barplot
source("~/final-projects-ttr007/Chart1.R")
source("~/final-projects-ttr007/Chart1.R")
source("~/final-projects-ttr007/Chart1.R")
barplot
race_plot
source("~/final-projects-ttr007/Chart1.R")
race_plot
age_plot
runApp()
runApp()
colnames(dataset)
source("~/final-projects-ttr007/Chart1.R")
age_plot
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
usethis
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
